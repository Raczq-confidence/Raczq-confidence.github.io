<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript的隐式类型转换和运算符优先级</title>
      <link href="2021/081531160.html"/>
      <url>2021/081531160.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript的隐式类型转换和运算符优先级"><a href="#JavaScript的隐式类型转换和运算符优先级" class="headerlink" title="JavaScript的隐式类型转换和运算符优先级"></a>JavaScript的隐式类型转换和运算符优先级</h2><p>上文我们简单地讲了讲js当中的显式类型转换，今天我们来讲讲js当中的隐式类型转换</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>众所周知，js当中存在着许多的隐式类型转换。比如 <code>==</code> ，<code>!</code> ，<code>+</code> ，<code>-</code> 这些运算符和<code>if</code>判断当中的条件，而这其中也是存在某种特定规则的，下面我们就一起来探究一下</p><p>首先我们可以来看一下下面这些代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">"true"</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token boolean">false</span><span class="token operator">!</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token operator">!</span><span class="token number">5</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">"true"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">""</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token string">""</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token string">""</span><span class="token string">""</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"0"</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token string">"true"</span><span class="token boolean">true</span> <span class="token operator">++</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">NaN</span> <span class="token operator">*</span> <span class="token string">""</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以说上面的写法充分地展现js的非常”狂野“的一门语言，同时也展现出了js语言类型可变的弊端</p><p>我们通过上面的代码可以看出隐式转换无非就这几种运算符</p><p>这样的话，我们首先就从 <code>+ - * /</code> 这几个运算符开始讲起</p><p>我们把 <code>- * /</code> 这三个运算符分为一类，为什么这么分呢，主要是因为 <code>+</code> 运算符可以用来做两件事：拼接字符串和进行加运算</p><p>所以 <code>- * /</code> 这三个运算符会把左右两端的值转换为<code>Number</code>类型再进行对应的运算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">""</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token string">""</span> <span class="token comment">// 两端都转为数字为0，想当于0 - - 0，所以为0</span><span class="token string">""</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 同理 这个输出-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们再来看<code>+</code>的转换规则，很简单，当两端的值任意一端有字符串，就进行字符串拼接（<strong>当两端有对象时，也算作字符串</strong>）；否则就进行加运算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">"true"</span> <span class="token comment">// 字符串拼接 值为"truetrue"</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token boolean">true</span> <span class="token comment">// 转换为数字， 相当于1 + 1 输出2</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token comment">//转换为字符串，输出"1,2,34,5,6"</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 转换为字符串，输出"[object Object]"</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 这个比较特殊，前面的{}会视为代码块语句，所以代码就相当于+[]，所以输出0</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token comment">// 0</span><span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token boolean">false</span> <span class="token comment">// 转换为数字，相当于NaN + 0，输出NaN</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">"true"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// -相连都转换为数字，输出NaN</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"0"</span> <span class="token comment">// 括号内为0，+上字符串0，输出“00”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看完<code>+ - * /</code>后，我们来看真正恐怖的运算符：<code>==</code></p><p><code>==</code> 他的比对规则其实是这样：</p><ol><li>首先判断类型是否相同，类型相同则直接执行全等判断<ol><li>如果是基本类型值，则判断两个值是否相同</li><li>如果是引用类型值，则判断两个对象的内存地址是否相同，简单来讲就是判断是否为同一个对象</li></ol></li><li>如果类型不同，则进行类型转换<ol><li>如果存在对象，首先对对象执行<code>ToPrimitive</code>操作，然后再进行相等判断</li><li>这个时候，如果存在字符串与布尔值，则对值执行<code>ToNumber</code>操作，转成数字类型，然后再进行相等判断</li></ol></li></ol><p>下面我们看几个例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token string">"true"</span> <span class="token comment">// 因为类型不相同并且存在字符串与布尔值，所以转换为数字就变成了 1 == NaN，所以为false</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 这行代码因为类型不同，就相当于 [] == false, 所以要进行类型转换，就会转换为 "" == false，之后双方都转换为数字，就相当于 0 == 0，所以是true</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 这个问题就请大家自己思考了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>!</code>运算符会将后面的值转换为布尔值，<code>+ -</code> 运算符会将后面的值转换为数字</p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>这里主要对优先级做个总结，其余不再过多赘述</p><p><strong>逗号(,) &lt; 赋值(=) &lt; 逻辑或(||) &lt; 逻辑与(&amp;&amp;) &lt; 相等判断(===) &lt; 大小判断(&gt;,&lt;) &lt; 加减 &lt; 乘除 &lt; typeof &lt; 前置递减递增(++…) &lt; 逻辑非(!…) &lt; 后置递减递增 (…++) &lt; new &lt; 成员访问(x[y]或x.y) &lt; 小括号</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript显式类型转换</title>
      <link href="2021/040144244.html"/>
      <url>2021/040144244.html</url>
      
        <content type="html"><![CDATA[<p>好久没来给大家更新了，今天我在前端群里看到了一个很有意思的图片</p><p><img src="https://img.imgdb.cn/item/606589578322e6675cb57fdb.jpg" alt="有趣的JavaScript"></p><p>说实话，我个人当初打算做前端，很大一部分原因就是因为JavaScript语言很有趣。但当真正接触了JavaScript语言后，可就不是有趣那么简单了。其实上图中主要还是JavaScript的类型转换问题，所以我们先从JavaScript的类    型转换开始说起</p><h2 id="一、JavaScript显式类型转换"><a href="#一、JavaScript显式类型转换" class="headerlink" title="一、JavaScript显式类型转换"></a>一、JavaScript显式类型转换</h2><h3 id="1-显式转换"><a href="#1-显式转换" class="headerlink" title="1.显式转换"></a>1.显式转换</h3><p>JavaScript中存在很多显式转换的函数：</p><ol><li><p>转换为数值类型：</p><p>parseInt，parseFloat，Number</p></li><li><p>转换为布尔值类型：</p><p>Boolean</p></li><li><p>转换为字符串类型：</p><p>toString，String</p><h4 id="1）数值类型转换"><a href="#1）数值类型转换" class="headerlink" title="1）数值类型转换"></a>1）数值类型转换</h4></li></ol><h5 id="Number函数"><a href="#Number函数" class="headerlink" title="Number函数"></a>Number函数</h5><p> （1）如果是布尔值，true和false分别被转换为1和0<br> （2）如果是数字值，返回本身。<br> （3）如果是null，返回0.<br> （4）如果是undefined，返回NaN。<br> （5）如果是字符串，遵循以下规则：<br>      1、如果字符串中只包含数字，则将其转换为十进制（忽略前导0）<br>      2、如果字符串中包含有效的浮点格式，将其转换为浮点数值（忽略前导0）<br>      3、如果是空字符串，将其转换为0<br>      4、如果字符串中包含非以上格式，则将其转换为NaN<br> （6）如果是对象，则调用对象的valueOf()方法，然后依据前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，再次依照前面的规则转换返回的字符串值。</p><p>接下来根据上述规则写几个例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span> <span class="token comment">// 123</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"-123"</span><span class="token punctuation">)</span> <span class="token comment">// -123</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"1.2"</span><span class="token punctuation">)</span> <span class="token comment">// 1.2</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"000123"</span><span class="token punctuation">)</span> <span class="token comment">// 123</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"-000123"</span><span class="token punctuation">)</span> <span class="token comment">// -123</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"0x11"</span><span class="token punctuation">)</span> <span class="token comment">// 17</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"   "</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"123 123"</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"100a"</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="parseInt函数"><a href="#parseInt函数" class="headerlink" title="parseInt函数"></a>parseInt函数</h5><p> （1）忽略字符串前面的空格，直至找到第一个非空字符<br> （2）如果第一个字符不是数字符号或者负号，返回NaN<br> （3）如果第一个字符是数字，则继续解析直至字符串解析完毕或者遇到一个非数字符号为止</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">" 3"</span><span class="token punctuation">)</span> <span class="token comment">// 3</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"@q 1"</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123 abc"</span><span class="token punctuation">)</span> <span class="token comment">// 123</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"-123 abc"</span><span class="token punctuation">)</span> <span class="token comment">// -123</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0xFF"</span><span class="token punctuation">)</span> <span class="token comment">// 255</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="parseFloat函数"><a href="#parseFloat函数" class="headerlink" title="parseFloat函数"></a>parseFloat函数</h5><p>它的规则与parseInt基本相同，但也有点区别：字符串中第一个小数点符号是有效的，如果字符串包含一个可解析为整数的数，则返回整数值而不是浮点数值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"  3.2"</span><span class="token punctuation">)</span> <span class="token comment">// 3.2</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"1.23 abc"</span><span class="token punctuation">)</span> <span class="token comment">// 1.23</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"abc 1"</span><span class="token punctuation">)</span> <span class="token comment">//NaN</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"-1.2."</span><span class="token punctuation">)</span> <span class="token comment">// -1.2</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">".1"</span><span class="token punctuation">)</span> <span class="token comment">// 0.1</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）布尔值类型转换"><a href="#2）布尔值类型转换" class="headerlink" title="2）布尔值类型转换"></a>2）布尔值类型转换</h4><p>将任何类型的值转换为布尔值</p><p>以下的特殊值会被转换为false：false、””、0、NaN、null、undefined，其余任何值都会被转换为true</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token operator">!</span><span class="token operator">!</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）字符串类型转换"><a href="#3）字符串类型转换" class="headerlink" title="3）字符串类型转换"></a>3）字符串类型转换</h4><p>将任何类型的值转换为字符串，其规则为：</p><p> （1）如果有toString()方法，则调用该方法并返回结果<br> （2）如果是null，返回”null”<br> （3）如果是undefined，返回”undefined”</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// ""</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// "null"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// "undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖与节流</title>
      <link href="2021/022548515.html"/>
      <url>2021/022548515.html</url>
      
        <content type="html"><![CDATA[<p>好长时间没有更新了，今天主要想来说一下前端优化方面里很重要的两个概念：防抖与节流</p><h2 id="一、防抖（debounce）"><a href="#一、防抖（debounce）" class="headerlink" title="一、防抖（debounce）"></a>一、防抖（debounce）</h2><p>函数防抖的定义大致如下：<strong>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时</strong></p><p>如果没有明白没关系，接下来我们来举一个例子：</p><p>假如我们现在有一个输入框，每当我们在输入框输入一个字母时，就向后台发送一个ajax请求，如果我们不对其进行一定的约束的话，就会极大地浪费资源，降低前端性能。所以我们就采用防抖的方法：当用户频繁输入时，我们不会触发对应的回调函数；而在用户停止输入一段时间，1s或0.5s，这样就可以有效地节省性能。请看下面的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*防抖指某个事件不希望被频繁调用，在用户一段时间没有进行重复操作的话再进行调用案例为输入框当用户停止输入时再触发* */</span><span class="token comment">//对防抖操作进行封装</span><span class="token keyword">function</span> <span class="token function">debounce</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">}</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来创建一个输入框测试一下上面的代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">input1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、节流（throttle）"><a href="#二、节流（throttle）" class="headerlink" title="二、节流（throttle）"></a>二、节流（throttle）</h2><p>讲完了函数防抖，接下来我们来说一下函数节流</p><p>函数节流的定义如下：<strong>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</strong></p><p>这次的话我们还是举个例子进行理解：</p><p>加入我们现在有一个可以拖拽的div盒子，我们需要在拖拽它时，获得它在页面中的位置。如果我们在拖拽操作上进行事件监听，那么它每挪动一点都会执行回调函数。此时我们就需要函数节流来使它在拖拽时，每1s才获取它在页面中的位置，这样就可以减少性能浪费。请看下面的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*节流就是某个时间隔一段时间就触发一次，案例为拖拽标签时，每隔一段时间就获取标签的位置* */</span><span class="token comment">//对节流进行封装</span><span class="token keyword">function</span> <span class="token function">throttle</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们创建一个可拖拽的盒子来进行测试</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 2px solid #000<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>可拖拽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    div1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drag'</span><span class="token punctuation">,</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> e<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、常见应用场景"><a href="#三、常见应用场景" class="headerlink" title="三、常见应用场景"></a>三、常见应用场景</h2><h3 id="1-函数防抖常见应用场景"><a href="#1-函数防抖常见应用场景" class="headerlink" title="1. 函数防抖常见应用场景"></a>1. 函数防抖常见应用场景</h3><p>连续的事件，只需触发一次回调的场景有：</p><ul><li>搜索框搜索输入。只需用户输入完一段时间，再发送请求</li><li>手机号、邮箱验证输入检测</li><li>窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li></ul><h3 id="2-函数节流常见应用场景"><a href="#2-函数节流常见应用场景" class="headerlink" title="2. 函数节流常见应用场景"></a>2. 函数节流常见应用场景</h3><p>间隔一段时间执行一次回调的场景有：</p><ul><li>滚动加载，加载更多或滚到底部监听</li><li>高频点击提交，表单重复提交</li><li>鼠标不断点击触发</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你一文看懂Vue的模板编译原理</title>
      <link href="2021/011053474.html"/>
      <url>2021/011053474.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、编译过程"><a href="#一、编译过程" class="headerlink" title="一、编译过程"></a>一、编译过程</h2><p>Vue的模板编译过程大致如下：</p><p>模板———&gt;模板编译——&gt;渲染函数——&gt;vnode——&gt;用于界面</p><p>vue.js提供了模板语法，允许我们声明式的描述状态和DOM之间的绑定关系</p><p>将模板编译为渲染函数，就是模板编译要做的事，模板编译可以分为三个阶段：</p><ol><li><p><strong>将模板解析为AST（抽象语法树）</strong>—— 解析器</p><p>首先通过解析将模板变成对应的AST</p></li><li><p><strong>遍历AST标记静态节点</strong> —— 优化器</p><p>因为静态节点不需要总是重新渲染，所以我们就对静态节点添加标记，使得虚拟DOM更新节点时可以辨认出他是静态节点，而不对他进行重新渲染</p></li><li><p><strong>使用AST生成渲染函数</strong> —— 代码生成器</p><p>优化完后，使用AST生成渲染函数</p></li></ol><p>如下图所示</p><p><img src="https://pic.imgdb.cn/item/5ffa769c3ffa7d37b33214cf.png" alt="流程图"></p><h2 id="二、过程讲解"><a href="#二、过程讲解" class="headerlink" title="二、过程讲解"></a>二、过程讲解</h2><h3 id="1-解析器（parser）"><a href="#1-解析器（parser）" class="headerlink" title="1. 解析器（parser）"></a>1. 解析器（parser）</h3><p><strong>解析器的功能就是将模板解析为AST</strong></p><h4 id="1）AST"><a href="#1）AST" class="headerlink" title="1）AST"></a>1）AST</h4><p>我们就可以先看一个例子，看看HTML在被解析后的AST长什么样</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我是静态节点，我不需要发生变化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过解析后的AST大致像下面这样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  tag<span class="token operator">:</span> <span class="token string">"div"</span>  type<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  staticRoot<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  plain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  parent<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>  attrsList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  attrsMap<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>          tag<span class="token operator">:</span> <span class="token string">"p"</span>          type<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          staticRoot<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          plain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          parent<span class="token operator">:</span> <span class="token punctuation">{</span>tag<span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          attrsList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          attrsMap<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>              type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>              text<span class="token operator">:</span> <span class="token string">"{{name}}"</span><span class="token punctuation">,</span>              <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              expression<span class="token operator">:</span> <span class="token string">"_s(name)"</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>          tag<span class="token operator">:</span> <span class="token string">"p"</span>          type<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          staticRoot<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          plain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          parent<span class="token operator">:</span> <span class="token punctuation">{</span>tag<span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          attrsList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          attrsMap<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>              type<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>              text<span class="token operator">:</span> <span class="token string">"我是静态节点，我不需要发生变化"</span><span class="token punctuation">,</span>              <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AST为一个树状结构的对象，每一层表示一个节点，第一层就是<code>div</code>（<code>tag:"div"</code>），<code>div</code>的子节点都在children属性当中，也就是两个<code>p</code>标签。我们还可以在AST当中看到用来标记节点类型的type属性，type一共有三种类型：</p><ol><li>当type属性为1时，代表当前节点是元素节点</li><li>当type属性为2时，代表当前节点是表达式节点</li><li>当type属性为3时，代表当前节点是文本节点</li></ol><h4 id="2）解析HTML"><a href="#2）解析HTML" class="headerlink" title="2）解析HTML"></a>2）解析HTML</h4><p>解析器内部的过程是十分复杂的，在这里我们可以先看一段解析HTML的伪代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> unary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 每当解析到标签开始位置时，触发该函数</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">end</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 每当解析到标签结束位置时，触发该函数</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">chars</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 每当解析到文本时，触发该函数</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">comment</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 每当解析到注释时，触发该函数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>parseHTML</code>函数中会循环对模板进行解析，每一轮循环中，都会进行字符串的截取，然后拿到 <code>"&lt;"</code> 字符前后的文本，<code>"&lt;"</code> 字符前的就当做文本处理，<code>"&lt;"</code> 字符后的通过正则判断，可推算出以下有限的几种状态。 </p><p><img src="https://img.imgdb.cn/item/5ffa6e983ffa7d37b32eef53.png"></p><p>从上图我们可以看出，被截取的片段大致分为开始标签，结束标签，HTML注释，条件注释，DOCTYPE，文本</p><p>解析的正则表达式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ncname <span class="token operator">=</span> <span class="token string">'[a-zA-Z_][\\w\\-\\.]*'</span><span class="token keyword">const</span> qnameCapture <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\:)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> startTagOpen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">^&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过上面的正则，我们就可以判断出截取片段的类型了，在解析开始标签的时候，如果该标签不是单标签，会将该标签放入到一个堆栈当中，每次闭合标签的时候，会从栈顶向下查找同名标签，直到找到同名标签，这个操作会闭合同名标签上面的所有标签。接下来我们举个例子：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当解析到<code>div</code>标签时，我们将<code>div</code>压入栈中，然后我们遇到了<code>h1</code>标签，我们将<code>h1</code>压入栈中，当我们遇到<code>h1</code>的结束标签时，就将<code>h1</code>标签弹出栈…… 我们遇到开始标签就压栈，遇到结束标签就出栈，以此类推。我们就可以得到一个具有父子层级关系的AST。</p><h4 id="3）解析文本"><a href="#3）解析文本" class="headerlink" title="3）解析文本"></a>3）解析文本</h4><p>当我们理清了大致流程后，我们就需要解决一个问题，怎么解析文本？</p><p>文本的解析一般有两种情况，一种是带有表达式的文本，一种是静态文本</p><p>如果是静态文本则不需要过多处理，但是如果是携带变量的文本，我们就需要使用文本解析器进行更进一步的解析，因为携带变量的文本在我们使用虚拟DOM进行渲染时需要将文本中的变量替换为变量所代表的值</p><p>举个例子，当<code>I will tell you {{ message }}</code>被解析时，文本解析器会通过正则表达式来判断他是不是带有变量，当判断出他携带变量后，就会将他解析得到这样一个expression变量<code>"I will tell you "+_s(message)</code>，此处的<code>_s</code>函数就是下面的<code>toString</code>函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val <span class="token operator">==</span> <span class="token keyword">null</span>      <span class="token operator">?</span> <span class="token string">''</span>      <span class="token operator">:</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'object'</span>      <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里解析过程就完成了</p><h4 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h4><p>解析器的原理不是特别难，主要就是两部分内容，一部分是截取字符串，一部分是对截取之后的字符串做解析。通过栈我们获得了一个带有DOM层级关系的AST</p><h3 id="2-优化器（optimizer）"><a href="#2-优化器（optimizer）" class="headerlink" title="2. 优化器（optimizer）"></a>2. 优化器（optimizer）</h3><p><strong>优化器的目的就是遍历AST，找出所有的静态节点，并为静态节点都添加标记</strong>，这么做的好处，就是<strong>当虚拟DOM重新渲染时，不需要去创建新节点并渲染</strong>，这样就可以节省很多性能</p><p>优化器的主要步骤就是找出所有的静态节点和所有的静态根节点并添加标记</p><p>什么是静态根节点呢，就是他的父级是动态节点，而他的所有子节点都是静态节点，那么他就是一个静态根节点</p><p>优化的主要实现方式就是通过为AST添加<code>static</code>与<code>staticRoot</code>属性，这是俩个布尔值属性，当他们为true时，则证明他们是静态节点或者静态根节点</p><h4 id="1）找出静态节点"><a href="#1）找出静态节点" class="headerlink" title="1）找出静态节点"></a>1）找出静态节点</h4><p>静态节点需要满足以下几个条件：</p><ol><li>不能有动态绑定，比如<code>v-</code>，<code>@</code>，<code>:</code>，</li><li>不能有<code>v-if</code>，<code>v-else</code>，<code>v-for</code>等指令</li><li>不能是内置的组件，即<code>slot</code>，<code>component</code></li><li>父节点不能是带有<code>v-for</code>的template</li><li>不存在动态节点才有的属性（静态节点的属性范围：<code>type</code>、<code>tag</code>、<code>attrsList</code>、<code>attrMap</code>、<code>plain</code>、<code>parent</code>、<code>children</code>、<code>attrs</code>、<code>staticClass</code>和<code>staticStyle</code>）</li></ol><p>伪代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isStatic</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 表达式，返回 false</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 静态文本，返回 true</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment">// 此处省略了部分条件</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>        <span class="token operator">!</span>node<span class="token punctuation">.</span>hasBindings <span class="token operator">&amp;&amp;</span> <span class="token comment">// 没有动态绑定</span>        <span class="token operator">!</span>node<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>for <span class="token operator">&amp;&amp;</span> <span class="token comment">// 没有 v-if/v-for</span>        <span class="token operator">!</span><span class="token function">isBuiltInTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// 不是内置组件 slot/component</span>        <span class="token operator">!</span><span class="token function">isDirectChildOfTemplateFor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// 不在 template for 循环内</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isStaticKey<span class="token punctuation">)</span> <span class="token comment">// 非静态节点</span>    <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实找出静态节点就是判断这个节点是不是静态节点</p><h4 id="2）标记静态节点"><a href="#2）标记静态节点" class="headerlink" title="2）标记静态节点"></a>2）标记静态节点</h4><p>当我们标记前，当然会判断他是不是静态节点，这时候我们就需要在标记函数中调用<code>isStatic</code>函数</p><p>伪代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">markStatic</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    node<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token function">isStatic</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果是元素节点，需要遍历所有子节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token function">markStatic</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span>static<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">// 如果有一个子节点不是静态节点，则该节点也必须是动态的</span>                node<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token boolean">false</span>                        <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过遍历我们找到了所有的静态节点，接下来我们来找出并标记所有的静态根节点</p><h4 id="3）找出并标记所有的静态根节点"><a href="#3）找出并标记所有的静态根节点" class="headerlink" title="3）找出并标记所有的静态根节点"></a>3）找出并标记所有的静态根节点</h4><p>这个过程与上面标记静态节点的过程类似，不同的就是静态根节点的寻找过程中，如果我们确定了静态根节点，那么我们就没有继续向下寻找了</p><p>我们上面的代码中提到过这样一个逻辑，静态节点的所有子节点也都是静态节点，所以我们在遍历时所见到的第一个静态节点肯定是静态根节点，它所有的子节点也肯定是静态节点</p><p><strong>！！！注意：有一种例外情况就是当一个节点没有任何子节点，知识独立的静态节点时，它是静态根节点，但是不需要标记为静态根节点，因为完全没有必要，优化的成本反而更高</strong></p><p>AST的优化到此完成</p><h4 id="4）总结-1"><a href="#4）总结-1" class="headerlink" title="4）总结"></a>4）总结</h4><p>整体逻辑其实就是递归遍历 AST 这颗树，然后将静态节点和静态根节点找到并打上标记。</p><h3 id="3-代码生成器（codegen）"><a href="#3-代码生成器（codegen）" class="headerlink" title="3. 代码生成器（codegen）"></a>3. 代码生成器（codegen）</h3><p>代码生成器的作用就是将AST转换为渲染函数的内容，我们称之为代码字符串</p><h4 id="1）代码字符串"><a href="#1）代码字符串" class="headerlink" title="1）代码字符串"></a>1）代码字符串</h4><p>我们举一个例子，看看转换出的代码字符串到底是什么样子的</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>showName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>转换完的代码字符串如下所示</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>render<span class="token operator">:</span> <span class="token string">"with(this){return _c('div',[(message)?_c('h2',[_v(_s(message))]):_e(),_v("</span> <span class="token string">"),_c('button',{on:{"</span>click<span class="token string">":showName}},[_v("</span>showName<span class="token string">")])])}"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>是不是有点看不懂，没关系，格式化一下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span>      <span class="token string">'div'</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span>        <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> on<span class="token operator">:</span> <span class="token punctuation">{</span> click<span class="token operator">:</span> showName <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">'showName'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当这样的一个代码字符串导入外界时，会放到一个函数当中进行运行，这个函数就叫做渲染函数</p><p>渲染函数的作用是创建vnode，代码字符串中的 <code>_c</code> 与<code> _v</code>都是创建vnode的方法，<code>_c</code>是创建元素类型的vnode，<code>_v</code>是创建文本类型的vnode，<code>_s</code>上面介绍过，是<code>toString</code>，<code>_c</code>就是<code>createElement</code>的别称，它是虚拟DOM中提供的方法，他的作用是创建虚拟节点</p><h4 id="2）通过AST生成代码字符串"><a href="#2）通过AST生成代码字符串" class="headerlink" title="2）通过AST生成代码字符串"></a>2）通过AST生成代码字符串</h4><p>上面我们简单提到了不同类型的节点，其实节点有以下三种类型：</p><ul><li>元素节点，通过<code>_c</code>创建，也就是<code>createElement</code></li><li>文本节点，通过<code>_v</code>创建，也就是<code>createTextVNode</code></li><li>注释节点，通过<code>_e</code>创建，也就是<code>createEmptyVNode</code></li></ul><p>我们分开来讲三种节点的生成方式</p><h5 id="a-元素节点"><a href="#a-元素节点" class="headerlink" title="a. 元素节点"></a>a. 元素节点</h5><p>生成元素节点的大体逻辑就是通过<code>getData</code>和<code>getChildren</code>方法获取到<code>data</code>和<code>chilren</code>，将他们进行拼接，最后返回一个<code>_c(tag,data,children)</code>的字符串返回</p><p>调用<code>getData</code>方法进行拼接的时候，我们需要检测<code>plain</code>属性（在上面解析时创建的属性，如果这个节点没有属性，就会将<code>plain</code>设置为true），如果<code>plain</code>属性为false，那么就会调用<code>getData</code>将所有的属性拼接在一个<code>{}</code>当中</p><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getElement</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> el<span class="token punctuation">.</span>plain <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> <span class="token function">getData</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>        <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">genChilderen</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>        code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_c('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">/</span><span class="token operator">/</span>      data <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">''</span> <span class="token comment">//data </span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>      children <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">''</span> <span class="token comment">//children</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">return</span> code<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-文本节点"><a href="#b-文本节点" class="headerlink" title="b. 文本节点"></a>b. 文本节点</h5><p>文本节点的生成非常简单，只需要将文本放入<code>_v</code>的参数中就可以，如果是表达式，就使用expression；如果是静态文本，就使用<code>text</code></p><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getText</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_v(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>text<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span>  <span class="token operator">?</span> text<span class="token punctuation">.</span>expression      <span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-注释节点"><a href="#c-注释节点" class="headerlink" title="c. 注释节点"></a>c. 注释节点</h5><p>注释节点的生成方式与文本节点大致相同，直接放入<code>_e</code>就可以了</p><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getComment</span> <span class="token punctuation">(</span><span class="token parameter">comment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_e(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>到这里编译过程就全部完成了</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><strong>模板编译的大致过程为，通过解析器将模板生成AST；再通过优化器对AST进行遍历优化，找出所有的静态节点与静态根节点进行标记；之后使用代码生成器将优化后的AST转换为渲染函数所需要的代码字符串，之后就将代码字符串交给虚拟dom进行渲染</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Vue </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个迷你Vue框架</title>
      <link href="2021/010936721.html"/>
      <url>2021/010936721.html</url>
      
        <content type="html"><![CDATA[<p>这篇博客我带大家一起实现一个迷你的Vue框架，仅实现了一些基本功能，如生命周期，<code>$nextTick</code>，自定义指令等并没有实现</p><p>在书写之前，我们需要了解一下Vue的响应式原理</p><h2 id="Vue的响应式原理"><a href="#Vue的响应式原理" class="headerlink" title="Vue的响应式原理"></a>Vue的响应式原理</h2><p>这里我先引入Vue官网上的一张响应式原理图，方便大家理解</p><p><img src="https://cn.vuejs.org/images/data.png" alt="响应式原理"></p><p>简单来讲，就是<strong>对Vue的所有属性进行数据劫持，在进行数据操作时进行拦截处理</strong></p><p>对于Vue的响应式理解也可以用下图描述</p><p><img src="https://img.imgdb.cn/item/5ff9638f3ffa7d37b3ab5db7.png"></p><p>主要流程如下</p><ol><li>当创建一个Vue实例时，会通过Observer对其中所有的属性进行数据劫持，添加setter和getter方法</li><li>每当Watcher（订阅者）执行update方法时，会自动触发getter方法，并将Watcher（订阅者）加入到依赖对象Dep（Dependency 发布者）当中</li><li>之后每当数据发生改变时，Dep中的nodify方法就会调用，通知有关该数据的所有Watcher（订阅者）进行数据更新</li></ol><h2 id="手写迷你Vue框架"><a href="#手写迷你Vue框架" class="headerlink" title="手写迷你Vue框架"></a>手写迷你Vue框架</h2><p>在实现之前，大家一定要对<code>Object.defineProperty</code>方法有所了解，在本文中不再对此方法进行过多介绍，感兴趣的朋友可以通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">MDN文档</a>或者《你所不知道的JavaScript》一书（学前端的朋友强烈推荐阅读）进行了解</p><h3 id="1-创建Vue对象"><a href="#1-创建Vue对象" class="headerlink" title="1. 创建Vue对象"></a>1. 创建Vue对象</h3><p>首先我们需要创建一个Vue对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 创建一个Vue对象 * */</span><span class="token keyword">class</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span><span class="token comment">//参数为传入Vue当中的设置对象</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> options<span class="token punctuation">.</span>data<span class="token comment">//获取对应的dom元素</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将所有的$data转换为响应式（可观察）</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token comment">//将元素与数据进行视图解析</span>    <span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实现Observe"><a href="#2-实现Observe" class="headerlink" title="2. 实现Observe"></a>2. 实现Observe</h3><p>在Vue对象中，我们需要对data属性进行数据劫持，为他设置getter和setter，也就是<code>Observe</code>函数的实现，在这里我们先对data进行遍历，之后在defineReactive函数中实现数据劫持</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 创建将数据转为响应式的Observe函数（观察者） 参数为需要转换的data  * */</span><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//首先需要判断data是不是对象，之后再进行遍历</span><span class="token comment">//这里通过Object原型上的toString方法来判断data是否为对象</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//对data对象进行遍历，首先获取到data当中的所有属性</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//进行数据响应式转化</span><span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//递归进行数据转换（需要判断属性值是不是对象）</span><span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>defineReactive</code>函数进行数据劫持</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 创建通过Object的defineProperty函数来进行数据监听的defineReactive函数 参数为监听对象，监听对象的属性以及监听对象的属性对应值  * */</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//在这里我们需要一个Dep依赖对象实例（调度中心）实例</span><span class="token comment">//每一个绑定数据都需要一个dep实例</span><span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//进行数据监听</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//Dep依赖对象添加相关的Watcher</span>Dep<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> val<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断新值是否与旧值相等</span><span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果不相等就赋值，并重新进行数据响应式转换</span>val <span class="token operator">=</span> newVal<span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token comment">//dep对象实例通知所有与之相关的Watcher更新</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建Dep依赖对象"><a href="#3-创建Dep依赖对象" class="headerlink" title="3. 创建Dep依赖对象"></a>3. 创建Dep依赖对象</h3><p>在<code>defineReactive</code>函数中，我们可以看到，我们用到了<code>Dep</code>依赖对象，所以我们紧接着来创建<code>Dep</code>（发布者）对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 创建Dep依赖对象（发布者） 可以理解为依赖于对应数据的Watcher集合（主要用于存储订阅者Watcher，通知订阅者）  * */</span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//创建一个订阅者Watcher集合</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//添加订阅者</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token parameter">watcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//通知所有的订阅者数据更新</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//遍历subs数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> sub <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//subs数组的每一个元素都是对应数据的订阅者watcher</span><span class="token comment">//watcher上由一个方法update（更新）</span>sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//初始化Dep.target</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在最后我用到了一个<code>Dep.target</code>属性，它主要使用来收集<code>Watcher</code>（订阅者）</p><h3 id="4-实现compile"><a href="#4-实现compile" class="headerlink" title="4. 实现compile"></a>4. 实现compile</h3><p>我们稍后再来写<code>Watcher</code>（订阅者），在这里我们先来实现解析视图的函数<code>compile</code>（因为创建<code>Watcher</code>对象实例在<code>compile</code>中）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 创建视图解析函数（compiler） 参数为vue挂载的元素与vue的数据 * */</span><span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取el所有的子元素转存进数组并且遍历</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* 需要判断节点的类型 html节点（元素节点） 文字节点（如{{ message }}） * */</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是元素节点就进行递归</span><span class="token function">compile</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是文字节点，将文字解析</span><span class="token function">compileText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>compile</code>中我们用到了解析文本的函数<code>compileText</code>（主要通过正则表达式来解析像这样的插值表达式<code>{{ message }}</code>，在Vue的源码中，大量用到了正则表达式），在<code>compileText</code>我们用到了<code>textToExp</code>，他就是通过正则表达式来解析文本</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 视图文本解析函数compileText 参数为元素以及数据 * */</span><span class="token keyword">function</span> <span class="token function">compileText</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//对于节点中的文本进行解析</span><span class="token keyword">let</span> exp <span class="token operator">=</span> <span class="token function">textToExp</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token comment">//创建观察者</span><span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token parameter">newVal</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newVal<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/* 解析文字节点的函数（通过正则表达式来实现） 参数为传入的文本 * */</span><span class="token keyword">function</span> <span class="token function">textToExp</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//将对应文本根据{{  }}来对字符串进行截取</span><span class="token keyword">let</span> fragments <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">({{.+?}})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>    <span class="token comment">//对于片段中的每一个元素进行遍历替换</span>    fragments <span class="token operator">=</span> fragments<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">fragment</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fragment<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{{.+?}}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fragment <span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> fragment<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^{{|}}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            fragment <span class="token operator">=</span> <span class="token string">'`'</span> <span class="token operator">+</span> fragment<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">`</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'\\`'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'`'</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> fragment    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//最后将文本片段拼接为字符串</span>    <span class="token keyword">return</span> fragments<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//如果当亲文本类似于'你的框架运行了 {{ count }} s 还没有报错'</span><span class="token comment">//那么最后拼接出的字符串类似于'你的框架运行了 + ( count ) + s 还没有报错'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-创建Watcher对象"><a href="#5-创建Watcher对象" class="headerlink" title="5. 创建Watcher对象"></a>5. 创建Watcher对象</h3><p>所有的这些都写完后，我们来创建<code>Watcher</code>（订阅者）对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 创建观察者对象（Watcher） * */</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">exp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>oldVal <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">expToFuntion</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callback <span class="token operator">=</span> callback    <span class="token comment">//创建新watcher时需要进行一次更新</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment">//用来检测获取值，并将Dep.target指向这个watcher</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//将Dep.target指向这个watcher</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token comment">/*通过调用getter获取到值当getter调用时会触发data的数据监听此时就需要将Watcher添加进去 */</span><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//将Dep.target清空</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token comment">//构造函数中传入的callback回调函数在update中被调用</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取值</span><span class="token keyword">let</span> newVal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果数据发生了更新</span><span class="token keyword">if</span><span class="token punctuation">(</span>newVal <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//旧值更新</span><span class="token keyword">this</span><span class="token punctuation">.</span>oldVal <span class="token operator">=</span> newVal<span class="token comment">//如果callback存在则被调用</span><span class="token keyword">this</span><span class="token punctuation">.</span>callback <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Watcher</code>（订阅者）对象中用到了一个工具函数<code>expToFuntion</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 创建转换函数expToFuntion 参数为textToExp转换的文本和data * */</span><span class="token keyword">function</span> <span class="token function">expToFuntion</span><span class="token punctuation">(</span><span class="token parameter">exp<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* 通过with关键字（很少见，之前在《你所不知道的JavaScript》中有见到）正常情况下不推荐使用with关键字此处并不会产生影响，所以使用了with关键字*/</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'with(this){return '</span> <span class="token operator">+</span> exp <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>这下迷你Vue框架书写完成，我们创建一个例子来进行测试</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>迷你vue框架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>你的框架运行了 {{ count }} s 还没有报错<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minVue.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>data<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>vue<span class="token punctuation">.</span>$data<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果大家可以自行测试，本文的所有源码<a href="https://github.com/Raczq-confidence/min-Vue">在这里</a>，感兴趣的朋友自行获取</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Vue </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021新年快乐</title>
      <link href="2021/01012402.html"/>
      <url>2021/01012402.html</url>
      
        <content type="html"><![CDATA[<h2 id="2021新年快乐"><a href="#2021新年快乐" class="headerlink" title="2021新年快乐"></a>2021新年快乐</h2><p>昨天（佐田），我们度过了梦幻般的一年，不得不说这一年发生的事情真的是太多了。在今天，我们终于迎来了崭新的2021，<del>庆贺吧！</del>（不是）</p><p>接下来，我会为大家带来一个网上的烟花小案例</p><p>因为之前我自学了canvas，所以本案例我通过自己的理解对其进行了修改，代码如下</p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Happy 2021!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- partial:index.partial.html --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Lilita+One&amp;display=swap<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Anton&amp;display=swap<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- partial --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>https://aaserver.net/libraries/gameCanvas/gameCanvas-4.0.js<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 本案例利用canvas来绘制所有的烟花效果 所以实现就完全依赖js * */</span><span class="token comment">//创建一个GameCanvas对象实例</span><span class="token keyword">var</span> gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token function">textToPoints</span><span class="token punctuation">(</span><span class="token string">"2 0 2 1"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"Anton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> titleParticles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> fireworks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> particles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> gravity <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token comment">//创建两个定时器，方便在页面运行到一定时间将他们清除掉</span><span class="token keyword">var</span> fireWorkTimer1<span class="token punctuation">;</span><span class="token keyword">var</span> fireWorkTimer2<span class="token punctuation">;</span><span class="token comment">//设置延时两秒开始放烟花</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fireWorkTimer1 <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fireworks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Firework</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fireworks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Firework</span><span class="token punctuation">(</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9.5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"gold"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fireWorkTimer2 <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fireworks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Firework</span><span class="token punctuation">(</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9.5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"gold"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行2分钟后清除所有的定时器（清除烟花效果）</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>fireWorkTimer1<span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>fireWorkTimer2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">250</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">circle</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"rgb(200, 200, 200)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> starImage <span class="token operator">=</span> <span class="token function">canvasToImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>gc<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> <span class="token string">"source-over"</span><span class="token punctuation">;</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token string">"rgba(0, 0, 0, 0.1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gc<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>starImage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gc<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> <span class="token string">"lighter"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fireworks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> firework <span class="token operator">=</span> fireworks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>firework<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>firework<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> particles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> particle <span class="token operator">=</span> particles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>particle<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>particle<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titleParticles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> p <span class="token operator">=</span> titleParticles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//绘制标题打开状态的每一个白色烟花点</span><span class="token keyword">function</span> <span class="token function">TitleParticle</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> vx<span class="token punctuation">,</span> vy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vx <span class="token operator">=</span> vx<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy <span class="token operator">=</span> vy<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>ay <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxHealth <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vx<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vy<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vx <span class="token operator">*=</span> <span class="token number">0.95</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy <span class="token operator">*=</span> <span class="token number">0.95</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ay<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>ay <span class="token operator">*=</span> <span class="token number">0.95</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxHealth<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>health<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>titleParticles<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>titleParticles<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//设置render图形来绘制图形</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxHealth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//创建一个烟花构造函数</span><span class="token keyword">function</span> <span class="token function">Firework</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> vx<span class="token punctuation">,</span> vy<span class="token punctuation">,</span> radius <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vx <span class="token operator">=</span> vx<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy <span class="token operator">=</span> vy<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vx<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vy<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy <span class="token operator">+=</span> gravity<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fireworks<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>fireworks<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> scale <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> p <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">*</span> scale <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">,</span>y<span class="token operator">:</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> scale <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">}</span><span class="token keyword">var</span> particle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TitleParticle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>titleParticles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>particle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> power <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">var</span> vx <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> power<span class="token punctuation">;</span><span class="token keyword">var</span> vy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> power<span class="token punctuation">;</span>particles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Particle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> vx<span class="token punctuation">,</span> vy<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Particle</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> vx<span class="token punctuation">,</span> vy<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vx <span class="token operator">=</span> vx<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy <span class="token operator">=</span> vy<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>life <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vx<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vy<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy <span class="token operator">+=</span> gravity<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vx <span class="token operator">*=</span> <span class="token number">0.95</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy <span class="token operator">*=</span> <span class="token number">0.95</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>life<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>life <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>particles<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>particles<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>life <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rgba("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>life <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//将传入的字符串进行计算转换为烟花点的数组</span><span class="token keyword">function</span> <span class="token function">textToPoints</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> textSize<span class="token punctuation">,</span> font</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> textSize <span class="token operator">*</span> <span class="token number">1.3</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">"middle"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> textSize <span class="token operator">+</span> <span class="token string">"px "</span> <span class="token operator">+</span> font<span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> imageData <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> data <span class="token operator">=</span> imageData<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">index</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> canvas<span class="token punctuation">.</span>width <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">var</span> threshold <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">%</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span>y<span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">/</span> canvas<span class="token punctuation">.</span>width <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token function">index</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">||</span>data<span class="token punctuation">[</span><span class="token function">index</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">||</span>data<span class="token punctuation">[</span><span class="token function">index</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">||</span>data<span class="token punctuation">[</span><span class="token function">index</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>points<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">%</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span>y<span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">/</span> canvas<span class="token punctuation">.</span>width <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> points<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://pic.downk.cc/item/5feec4563ffa7d37b3b80494.gif" alt="2021新年快乐"></p><p>最后祝大家新的一年开心快乐，幸福安康，都能得到自己想要的生活。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识总结（一）</title>
      <link href="2020/123163670.html"/>
      <url>2020/123163670.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-href与src的区别"><a href="#1-href与src的区别" class="headerlink" title="1.href与src的区别"></a>1.href与src的区别</h2><p><strong>href (Hypertext Reference) 超文本引用</strong>这个属性是用来指定资源的位置，它主要是来描述当前文档与目标资源之间的联系。</p><p><strong>src(Source) 资源</strong>这个属性是指向物体的来源地址，在请求src资源时会将其资源进行下载并应用到当前文档中。如iframe元素，js脚本，img图片等，当浏览器解析到这些元素时，会暂停对其他资源的下载和处理，直至将该资源加载，编译，执行完毕。这也是为什么推荐将js脚本放在页面的底部。</p><p>总的来说，href相当于打开了一个通道，而src是直接将资源获取下载</p><h2 id="2-伪类与伪元素的区别"><a href="#2-伪类与伪元素的区别" class="headerlink" title="2.伪类与伪元素的区别"></a>2.伪类与伪元素的区别</h2><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><ul><li>伪类用于<strong>向某些选择器添加特殊的效果</strong></li><li>伪类分为<strong>状态伪类（<code>:link</code>，<code>:hover</code>，<code>:active</code>等）</strong>和<strong>结构化伪类（<code>:first-child</code>，<code>:nth-child</code>，<code>:first-of-type</code>等）</strong></li></ul><blockquote><p>它控制的内容实际上和元素是相同的，但是它本身只是基于元素的抽象，并不存在于文档中，所以叫伪元素。本质上是创建了一个虚拟容器(元素)，我们可以在其中添加内容或样式</p></blockquote><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素的使用并不如伪类那么常用，但是当他使用时都是很重要的部分</p><p>常见的伪元素选择器</p><table><thead><tr><th>伪元素</th><th>作用</th></tr></thead><tbody><tr><td>::first-letter</td><td>向文本的第一个字母添加特殊样式</td></tr><tr><td>::first-line</td><td>向文本的首行添加特殊样式</td></tr><tr><td>::before</td><td>在元素之前添加内容</td></tr><tr><td>::after</td><td>在元素之后添加内容</td></tr><tr><td>::selection</td><td>匹配突出显示的文本(用鼠标选择文本时的文本)</td></tr></tbody></table><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>伪类使用<code>:</code>（单冒号），伪元素使用<code>::</code>（双冒号）；但是因为低版本的浏览器中，伪元素都是用<code>:</code>（单冒号），所以现在为了兼容性，伪元素也可以使用<code>:</code>（单冒号）</li><li>伪类是还是基于dom的；而伪元素则是创建了一个新的不存在于dom当中的元素</li><li>伪类只要不是互斥就可以叠加使用，比如<code>element:first-child:hover</code>；而伪元素在一个选择器中只能出现一次，并且必须在最末端</li><li>伪类与类选择器的优先级相同；伪元素与标签选择器的优先级相同</li></ol><h2 id="3-BFC"><a href="#3-BFC" class="headerlink" title="3.BFC"></a>3.BFC</h2><p>BFC（Block Formatting Context）直译为“块级格式化范围”。简单来说，BFC是一种规则，或者说是一种作用范，可以把它理解成是一个独立的容器，并且这个容器的里box的布局，与这个容器外的毫不相干</p><h3 id="BFC的约束规则"><a href="#BFC的约束规则" class="headerlink" title="BFC的约束规则"></a>BFC的约束规则</h3><ol><li><p>内部的Box会在垂直方向上一个接一个的放置</p></li><li><p>垂直方向的距离有margin决定(属于同一个BFC的两个相邻Box的margin会发生重叠，与方向无关)</p></li><li><p>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此</p></li><li><p>BFC的区域不会与float的元素区域重叠</p></li><li><p>计算BFC的高度时，浮动子元素也参与计算</p></li><li><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然</p></li></ol><p>这里的规则主要作用于下面的作用</p><h3 id="BFC的作用"><a href="#BFC的作用" class="headerlink" title="BFC的作用"></a>BFC的作用</h3><ul><li>不与浮动元素重叠</li><li>不会margin（外边距）重叠</li><li>可以将浮动的子元素包含其中</li></ul><h3 id="开启BFC的方法"><a href="#开启BFC的方法" class="headerlink" title="开启BFC的方法"></a>开启BFC的方法</h3><ol><li><p>display设置为inline-block，table-cell，table-caption</p></li><li><p>开启浮动（即float不能为none）</p></li><li><p>overflow设置为除visible的属性</p></li><li><p>position设置为除了relative和static的其他属性</p></li></ol><h2 id="4-display-none，visibility-hidden和opacity-0的区别"><a href="#4-display-none，visibility-hidden和opacity-0的区别" class="headerlink" title="4.display:none，visibility:hidden和opacity:0的区别"></a>4.display:none，visibility:hidden和opacity:0的区别</h2><p>关于这部分内容，对我来讲下面的表格可能更容易理解</p><table><thead><tr><th align="center"></th><th align="center">display:none</th><th align="center">visibility:hidden</th><th align="center">opacity:0</th></tr></thead><tbody><tr><td align="center">页面中</td><td align="center">不存在</td><td align="center">存在</td><td align="center">存在</td></tr><tr><td align="center">重排（性能较差）</td><td align="center">会</td><td align="center">不会</td><td align="center">不会</td></tr><tr><td align="center">重绘</td><td align="center">会</td><td align="center">会</td><td align="center">不一定（一般不会引起重绘）</td></tr><tr><td align="center">子元素复原</td><td align="center">不能</td><td align="center">能</td><td align="center">不能</td></tr><tr><td align="center">自身绑定事件</td><td align="center">不触发</td><td align="center">不触发</td><td align="center">触发</td></tr><tr><td align="center">被遮挡元素触发事件</td><td align="center">触发</td><td align="center">触发</td><td align="center">不触发</td></tr><tr><td align="center">transition过渡动画</td><td align="center">不支持</td><td align="center">支持</td><td align="center">支持</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> CSS </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>call，apply，bind的区别以及实现</title>
      <link href="2020/122921641.html"/>
      <url>2020/122921641.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-call，apply，bind的区别"><a href="#1-call，apply，bind的区别" class="headerlink" title="1. call，apply，bind的区别"></a>1. call，apply，bind的区别</h2><p>首先先来简单地说一下三者的共同点：</p><ol><li>三者都是用来<strong>改变函数体内部的this指向</strong></li><li>第一个参数都是<strong>this要指向的对象</strong></li><li><strong>后续参数都可以被用来进行传参</strong></li></ol><p>以下是<a href="https://developer.mozilla.org/zh-CN/">MDN文档</a>关于call，apply，bind的语法</p><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p><code>call()</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">call语法：<span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>thisArg<span class="token operator">:</span>：在fun函数运行时指定的<span class="token keyword">this</span>值。需要注意的是，指定的<span class="token keyword">this</span>值并不一定是该函数执行时真正的<span class="token keyword">this</span>值，如果这个函数处于非严格模式下，则指定为<span class="token keyword">null</span>和<span class="token keyword">undefined</span>的<span class="token keyword">this</span><span class="token function">值会自动指向全局对象</span><span class="token punctuation">(</span>浏览器中就是window对象<span class="token punctuation">)</span><span class="token function">，同时值为原始值</span><span class="token punctuation">(</span>数字，字符串，布尔值<span class="token punctuation">)</span>的<span class="token keyword">this</span>会指向该原始值的自动包装对象。arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span> 指定的参数列表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>举个例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">}</span><span class="token comment">// 下面两个函数调用的返回结果全部为NaN</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//输出结果为全局对象window</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//输出结果为obj对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><code>apply()</code> 方法调用一个具有给定<code>this</code>值的函数，以及以一个数组（或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects">类数组对象</a>）的形式提供的参数。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">apply语法：<span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span>thisArg： 在 fun 函数运行时指定的 <span class="token keyword">this</span> 值。需要注意的是，指定的 <span class="token keyword">this</span> 值并不一定是该函数执行时真正的 <span class="token keyword">this</span> 值，如果这个函数处于非严格模式下，则指定为 <span class="token keyword">null</span> 或 <span class="token keyword">undefined</span> 时会自动指向全局对象（浏览器中就是window对象），同时值为原始值（数字，字符串，布尔值）的 <span class="token keyword">this</span> 会指向该原始值的自动包装对象。argsArray<span class="token operator">:</span> 一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 fun 函数。如果该参数的值为<span class="token keyword">null</span> 或 <span class="token keyword">undefined</span>，则表示不需要传入任何参数。从ECMAScript <span class="token number">5</span> 开始可以使用类数组对象。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>举一个与上面的call类似的例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">}</span><span class="token comment">// 下面两个函数调用的返回结果全部为NaN</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//输出结果为全局对象window</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//输出结果为obj对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">bind语法：<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>thisArg 当绑定函数被调用时，该参数会作为原函数运行时的<span class="token keyword">this</span>指向。当使用<span class="token keyword">new</span> 操作符调用绑定函数时，该参数无效。arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span> 当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>bind函数我这里使用了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">MDN文档</a>上面的<code>bind</code>例子</p><ol><li>创建绑定函数例子</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token comment">// 在浏览器中，this 指向全局的 "window" 对象</span><span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token operator">:</span> <span class="token number">81</span><span class="token punctuation">,</span>  <span class="token function-variable function">getX</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 81</span><span class="token keyword">var</span> retrieveX <span class="token operator">=</span> module<span class="token punctuation">.</span>getX<span class="token punctuation">;</span><span class="token function">retrieveX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回 9 - 因为函数是在全局作用域中调用的</span><span class="token comment">// 创建一个新函数，把 'this' 绑定到 module 对象</span><span class="token comment">// 新手可能会将全局变量 x 与 module 的属性 x 混淆</span><span class="token keyword">var</span> boundGetX <span class="token operator">=</span> <span class="token function">retrieveX</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">boundGetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>偏函数例子</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">addArguments</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2<span class="token punctuation">}</span><span class="token keyword">var</span> list1 <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span><span class="token keyword">var</span> result1 <span class="token operator">=</span> <span class="token function">addArguments</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token comment">// 创建一个函数，它拥有预设参数列表。</span><span class="token keyword">var</span> leadingThirtysevenList <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个函数，它拥有预设的第一个参数</span><span class="token keyword">var</span> addThirtySeven <span class="token operator">=</span> <span class="token function">addArguments</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token function">leadingThirtysevenList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [37]</span><span class="token keyword">var</span> list3 <span class="token operator">=</span> <span class="token function">leadingThirtysevenList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [37, 1, 2, 3]</span><span class="token keyword">var</span> result2 <span class="token operator">=</span> <span class="token function">addThirtySeven</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 37 + 5 = 42</span><span class="token keyword">var</span> result3 <span class="token operator">=</span> <span class="token function">addThirtySeven</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 37 + 5 = 42 ，第二个参数被忽略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>区别总结：</strong></p><p>​    三者都是用于改变函数体内this指针的指向。</p><ol><li><code>call</code>与<code>apply</code>是为了<strong>改变某个函数运行时的上下文而存在的</strong>（就是为了改变函数内部this指针的指向）,<code>call</code>与<code>apply</code>调用的返回值为函数的执行结果；</li><li>如果使用<code>apply</code>或<code>call</code>方法，那么<code>this</code>指向他们的第一个参数，<code>apply</code>的第二个参数是一个参数数组，<code>call</code>的第二个及其以后的参数都是数组里面的元素，就是说要全部列举出来；</li><li><code>bind</code>与<code>apply</code>和<code>call</code>的最大的区别是：<code>bind</code>不会立即调用，而是返回一个新函数，称为绑定函数，其内的<code>this</code>指向为创建它时传入<code>bind</code>的第一个参数，而传入<code>bind</code>的第二个及以后的参数作为原函数的参数来调用原函数。</li></ol><h2 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h2><h3 id="call实现方法"><a href="#call实现方法" class="headerlink" title="call实现方法"></a>call实现方法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myCall</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 基础类型转换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>context <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> context <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> window    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'boolean'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment">// 定义一个函数返回结果</span><span class="token keyword">var</span> result        <span class="token comment">// 保存需要被调用的函数到context对象上</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment">// 获取除第一个参数context外的其他参数</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 将函数执行的返回结果存入result</span>result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>        <span class="token comment">// 将context上的fn属性清除</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn        <span class="token comment">// 返回值为result</span><span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token comment">// 将此函数暴露在Function的原型上</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> myCall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="apply实现方法"><a href="#apply实现方法" class="headerlink" title="apply实现方法"></a>apply实现方法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myApply</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基础类型转换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>context <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> context <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> window    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'boolean'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment">// 注意：当array的类型不为对象，undefined，null时才会报错(当typeof null时，值为'object')</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> array <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> array <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'第二个参数有问题'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment">// 判断array是否是数组</span>    array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">?</span> array <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">// 保存需要被调用的函数到context对象上</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment">// 将函数执行的返回结果存入result</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>array<span class="token punctuation">)</span>        <span class="token comment">// 将context上的fn属性清除</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn        <span class="token comment">// 返回值为result</span>    <span class="token keyword">return</span> result    <span class="token punctuation">}</span><span class="token comment">// 将此函数暴露在Function原型上</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myApply <span class="token operator">=</span> myApply<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bind实现方法"><a href="#bind实现方法" class="headerlink" title="bind实现方法"></a>bind实现方法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myBind</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基础类型转换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>context <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> context <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> window    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'boolean'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment">// 将this指针保存下来</span>    <span class="token keyword">var</span> pointer <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment">// 获取除了第一个参数的所有参数</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">/*     定义一个用来判断这个bind函数的返回值是否被new实例化调用的    如果是，则使用pointer(即指向自己)    如果不是，则使用context    */</span>    <span class="token keyword">function</span> <span class="token function">isConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">// 第一个参数就是绑定的指针</span>        <span class="token comment">// 第二个参数就是将bind和fn的参数合并</span>        <span class="token function">pointer</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">isConstructor</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> context<span class="token punctuation">,</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token comment">// 将上面函数作为bind函数的返回值</span><span class="token keyword">return</span> fn<span class="token punctuation">}</span><span class="token comment">// 将此函数挂载在Function的原型上</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myBind <span class="token operator">=</span> myBind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组去重以及排序</title>
      <link href="2020/122511745.html"/>
      <url>2020/122511745.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-数组去重"><a href="#1-数组去重" class="headerlink" title="1.数组去重"></a>1.数组去重</h2><p>在前端开发中经常会出现这样一个问题，怎么去除数组的重复项，接下来我将为大家介绍数组去重的几种方法</p><p>接下来的所有方法都会以下面的数组为例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Set集合去重"><a href="#Set集合去重" class="headerlink" title="Set集合去重"></a>Set集合去重</h3><p>ES6中新增了一种数据类型<code>Set</code>（集合），Set中的元素只会<strong>出现一次</strong>，即 Set 中的元素是唯一的。</p><blockquote><p><strong>注意：<code>NaN</code>和<code>undefined</code>都可以被存储在Set 中， <code>NaN</code>之间被视为相同的值（NaN被认为是相同的，尽管 NaN !== NaN）</strong></p></blockquote><p>所以我们通过将数组转换为集合再转换回数组的方式来实现数组去重</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://pic.downk.cc/item/5fe4ad9a3ffa7d37b3360794.png" alt="输出结果"></p><h3 id="对象去重"><a href="#对象去重" class="headerlink" title="对象去重"></a>对象去重</h3><p>因为向对象的已有属性进行添加时，属性的值会覆盖原来的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们可以通过遍历数组，向一个空对象添加属性，重复的属性会被覆盖掉</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>a<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">}</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.downk.cc/item/5fe4b0443ffa7d37b33a2b1e.png" alt="输出结果"></p><p>还可以通过这种方式来进行数组去重，将对象作为工具，直接在原数组上进行操作，本质上与上一种没有区别</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>length <span class="token operator">--</span>i<span class="token operator">--</span><span class="token keyword">continue</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.downk.cc/item/5fe4b44c3ffa7d37b340d1ff.png" alt="输出结果"></p><p><strong>这种方法的好处就在于比遍历更加方便，更加迅速，但是缺点也可以从上图中看出，他改变了数组原来的顺序</strong></p><h3 id="排序去重"><a href="#排序去重" class="headerlink" title="排序去重"></a>排序去重</h3><p>我们还可以通过排序之后去除相等的相邻项来实现数组去重</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">//为了下文更好看出区别，这里决定采用这个数组</span><span class="token keyword">function</span> <span class="token function">deleteRepeat</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//对数组进行升序排序</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//对数组进行遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断其不是第一项并且与前一项相等</span><span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//删除重复项</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> arr<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deleteRepeat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.downk.cc/item/5fe4b8a63ffa7d37b3475235.png" alt="输出结果"></p><p>可以看到数组排序成功，<strong>但是与上一个方法一样，同样会改变数组的顺序</strong></p><p>以上就是数组去重的几种常见方法</p><h2 id="2-数组排序"><a href="#2-数组排序" class="headerlink" title="2.数组排序"></a>2.数组排序</h2><p>数组排序的方法不需要多说，但是我们这里不打算使用sort等类似的排序方法，我们通过最基本的方法来实现，本文会介绍三种排序：冒泡排序，选择排序，快速排序。如果有朋友感兴趣可以去查找更多的排序方法，本文将不再过多赘述（本文在此只提出实现方法，具体思路请自行百度）</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token keyword">let</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token constant">A</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token constant">A</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>arr <span class="token operator">=</span> <span class="token constant">A</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//快速排序(相比冒泡与插入，性能最好)</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">quik</span> <span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断数组是否只有一个元素</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> array<span class="token punctuation">}</span><span class="token comment">//获取中间值</span><span class="token keyword">let</span> middleIndex <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> middle <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>middleIndex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">//设置左右数组</span><span class="token keyword">let</span> arrLeft <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arrRight <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当选取项大于中间值，将他添加到右数组；当选取项小于中间值，将他添加在左数组</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>middle <span class="token operator">?</span> arrRight<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> arrLeft<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//递归调用函数对左右数组进行排序,之后对他们进行拼接</span><span class="token keyword">return</span> <span class="token function">quik</span><span class="token punctuation">(</span>arrLeft<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span><span class="token function">quik</span><span class="token punctuation">(</span>arrRight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>arr <span class="token operator">=</span> <span class="token function">quik</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS当中的深浅拷贝以及数组扁平化</title>
      <link href="2020/122431219.html"/>
      <url>2020/122431219.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-深浅拷贝"><a href="#1-深浅拷贝" class="headerlink" title="1.深浅拷贝"></a>1.深浅拷贝</h2><p><strong>因为JS的变量包含两种不同数据类型的值：基本类型和引用类型</strong></p><blockquote><p>1.JS当中的基本数据类型包含以下几种：</p><p>number，string，boolean，null，undefined，Symbol（ES6新增基本类型，之后会专门对他进行介绍）</p><p>2.JS当中的引用数据类型：</p><p>Object（Object，Array，Function）</p></blockquote><p>两种数据类型最根本的区别在于两种变量的存储方式是不同的</p><p><strong>JS存储变量的方式包含两种：栈内存（stack）和 堆内存（heap）</strong></p><blockquote><p>栈内存：自动分配内存空间，系统自动释放，里面存放的是基本类型的值和引用类型的地址</p><p>堆内存：动态分配的内存，大小不定，也不会自动释放。里面存放引用类型的值。</p></blockquote><p><img src="https://pic.downk.cc/item/5fe424583ffa7d37b35c55fb.png" alt="JS的存储方式"></p><p>因为这样的存储方式，所以JS种两种数据类型的数据传递方式也不一样</p><ul><li><p>基本数据类型采用的是值传递</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个变量a并赋值为10</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token comment">// 将a的值10赋值给b (a、b都是基本类型，值传递)</span>b<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// b自加</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 10, 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>引用类型则是地址传递，将存放在栈内存中的地址赋值给接收的变量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个数组a并赋值 </span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>   <span class="token comment">// 数组是引用类型,采用地址传递，将a的地址赋值给b</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 给b数组增加一个'd'元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// ['a', 'b', 'c', 'd']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// ['a', 'b', 'c', 'd']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>深浅拷贝是指复制对象的级别深浅，具体来讲就是：</p><ul><li>浅拷贝是指复制对象的时候，只对第一层键值对进行独立的复制，如果对象内还有对象，则只能复制嵌套对象的地址</li><li>深拷贝是指复制对象的时候完全的拷贝一份对象，即使嵌套了对象，两者也相互分离，修改一个对象的属性，也不会影响另一个。其实只要递归下去，把那些属性的值仍然是对象的再次进入对象内部，进行复制即可。</li></ul><p>下面将为大家介绍深浅拷贝的几种实现方式</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><h4 id="1）Object-assign"><a href="#1）Object-assign" class="headerlink" title="1）Object.assign"></a>1）<code>Object.assign</code></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        a <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c <span class="token operator">:</span> <span class="token punctuation">{</span>x <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>d <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d+$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//正则表达式（也为引用数据类型）</span>    <span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj == obj2'</span><span class="token punctuation">,</span>obj <span class="token operator">==</span> obj2<span class="token punctuation">)</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj === obj2'</span><span class="token punctuation">,</span>obj <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.__proto__ == obj2.__proto__'</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> obj2<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">//true</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>c<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）Object-hasOwnProperty"><a href="#2）Object-hasOwnProperty" class="headerlink" title="2）Object.hasOwnProperty"></a>2）<code>Object.hasOwnProperty</code></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c <span class="token operator">:</span> <span class="token punctuation">{</span>x <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>d <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d+$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//正则表达式（也为引用数据类型）</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//浅拷贝</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断属性是否为obj原型上的属性，是的话就结束循环</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj == obj2'</span><span class="token punctuation">,</span>obj <span class="token operator">==</span> obj2<span class="token punctuation">)</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj === obj2'</span><span class="token punctuation">,</span>obj <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.__proto__ == obj2.__proto__'</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> obj2<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">//true</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>c<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为浅拷贝的级别比较低，所以当我修改克隆后对象的属性（不为基本数据类型）时，原对象的属性也会被修改，原因就是引用数据类型会通过地址传递。</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><h4 id="1）JSON-parse和JSON-stringify"><a href="#1）JSON-parse和JSON-stringify" class="headerlink" title="1）JSON.parse和JSON.stringify"></a>1）<code>JSON.parse</code>和<code>JSON.stringify</code></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c <span class="token operator">:</span> <span class="token punctuation">{</span>x <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种实现方法在项目中经常会使用到，<strong>缺点就是先转换为字符串再转换为对象，会开辟新的空间，并且当原对象中包含有函数（<code>Function</code>），日期（<code>Date</code>），正则表达式（<code>RegExp</code>）类型的属性时</strong>，就会出现下面例子出现的问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c <span class="token operator">:</span> <span class="token punctuation">{</span>x <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>d <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token function-variable function">e</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出的结果如下图所示</p><p><img src="https://pic.downk.cc/item/5fe42d0d3ffa7d37b362df61.png" alt="拷贝有误"></p><p>可以看出正则表达式类型的数据被转换为了{}，而函数类型的属性直接就消失不见了，所以我们可以采用下面的方式来进行深拷贝</p><h4 id="2）递归转换"><a href="#2）递归转换" class="headerlink" title="2）递归转换"></a>2）递归转换</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c <span class="token operator">:</span> <span class="token punctuation">{</span>x <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>d <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token function-variable function">e</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//创建新的对象(通过这种方式创建的对象或者对象实例，他们的构造函数都是相同的)</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断传入的实参是否为空</span><span class="token keyword">if</span><span class="token punctuation">(</span> obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token comment">//判断实参是否为对象(如果不为对象，则直接返回)</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token comment">//判断传入实参是否为函数</span><span class="token keyword">if</span><span class="token punctuation">(</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//创建返回值为新的Function实例</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//判断传入实参是否为正则表达式</span><span class="token keyword">if</span><span class="token punctuation">(</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//创建返回值为新的正则表达式实例</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//判断传入实参是否为Date</span><span class="token keyword">if</span><span class="token punctuation">(</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//创建返回值为新的Function实例</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> key <span class="token keyword">in</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//需要对数据进行过滤</span>newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> newObj<span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj2 === obj'</span><span class="token punctuation">,</span>obj2 <span class="token operator">===</span> obj<span class="token punctuation">)</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj2.c === obj.c'</span><span class="token punctuation">,</span>obj2<span class="token punctuation">.</span>c <span class="token operator">===</span> obj<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.downk.cc/item/5fe431f83ffa7d37b3667cf6.png" alt="执行结果"></p><p>可以看到成功对obj对象进行了深拷贝</p><h2 id="2-数组扁平化"><a href="#2-数组扁平化" class="headerlink" title="2.数组扁平化"></a>2.数组扁平化</h2><p>数组的扁平化，就是将一个嵌套多层的数组 array (嵌套可以是任何层数)转换为只有一层的数组。</p><p>举个例子，假设有个名为 flatten 的函数可以做到数组扁平化，效果就会如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来我们将去尝试实现数组扁平化（下文数组扁平化的目标都将为下面的数组）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token comment">//这是一个“四层”数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flat方法实现"><a href="#flat方法实现" class="headerlink" title="flat方法实现"></a><code>flat</code>方法实现</h3><p>flat方法是ES6新提出的方法</p><p>flat方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。他挂载在Array.prototype上</p><p>他需要传入一个数字，指定要提取嵌套数组的结构深度，默认值为 1，当传入参数为 3 时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果如下图所示</p><p><img src="https://pic.downk.cc/item/5fe436103ffa7d37b36930e2.png" alt="当参数为3时"></p><p>当传入参数为 Infinity 时，Infinity 便是遍历无穷层数，将其转为“一维”数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果如下图所示</p><p><img src="https://pic.downk.cc/item/5fe436f63ffa7d37b369cfb4.png" alt="当参数为Infinity时"></p><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a><code>toString</code>方法</h3><p>将需要扁平化的数组先转换为字符串，再转换为数组，之后将每一项变为数字，实现方法如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果如下图所示</p><p><img src="https://pic.downk.cc/item/5fe43b263ffa7d37b36cdd2f.png" alt="输出结果"></p><h3 id="利用正则表达式"><a href="#利用正则表达式" class="headerlink" title="利用正则表达式"></a>利用正则表达式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果如下图所示</p><p><img src="https://pic.downk.cc/item/5fe43b6f3ffa7d37b36d0841.png" alt="输出结果"></p><h3 id="循环验证"><a href="#循环验证" class="headerlink" title="循环验证"></a>循环验证</h3><p>循环验证元素是否为数组(判断条件中的回调函数也可以写<code>Array.isArray(item))</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下图所示</p><p><img src="https://pic.downk.cc/item/5fe43b993ffa7d37b36d23e8.png" alt="输出结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器搭建MySQL并远程连接</title>
      <link href="2020/12219273.html"/>
      <url>2020/12219273.html</url>
      
        <content type="html"><![CDATA[<p>感谢下面几篇博客的知识分享</p><ul><li><a href="https://www.jianshu.com/p/1dab9a4d0d5f">CentOS7 下 MySQL5.7的安装与配置</a></li><li><a href="https://blog.csdn.net/aa1215018028/article/details/90106425">MySQL5.7创建用户并授权，设置允许远程连接</a></li><li><a href="https://segmentfault.com/a/1190000022046000">记一次Navicat for MySQL 10060错误的解决过程</a></li></ul><p>本博客更多是根据我的具体情况来对上述三位进行总结</p><h2 id="1-CentOS7-下-MySQL5-7的安装与配置"><a href="#1-CentOS7-下-MySQL5-7的安装与配置" class="headerlink" title="1.CentOS7 下 MySQL5.7的安装与配置"></a>1.CentOS7 下 MySQL5.7的安装与配置</h2><p>本文的测试环境：</p><ul><li>CentOS 7.6.64</li><li>MySQL 5.7.32</li></ul><h3 id="安装MySQL源"><a href="#安装MySQL源" class="headerlink" title="安装MySQL源"></a>安装MySQL源</h3><p>安装MySQL源</p><pre class="line-numbers language-none"><code class="language-none"># 下载wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm# 安装 mysql 源yum localinstall mysql57-community-release-el7-11.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用下面的命令检查 MySQL源是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">yum repolist enabled | grep "mysql.*-community.*"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>使用 yum install 命令安装</p><pre class="line-numbers language-none"><code class="language-none">yum install -y mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h3><p>在 CentOS 7 下，新的启动/关闭服务的命令是 <code>systemctl start|stop mysqld</code></p><pre class="line-numbers language-none"><code class="language-none">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用 <code>systemctl status</code> 查看 MySQL 状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.downk.cc/item/5fe4054f3ffa7d37b345786f.jpg" alt="MySQL 启动状态"></p><h3 id="设置开机密码"><a href="#设置开机密码" class="headerlink" title="设置开机密码"></a>设置开机密码</h3><pre class="line-numbers language-none"><code class="language-none">systemctl enable mysqld# 重载所有修改过的配置文件systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改root本地账户密码"><a href="#修改root本地账户密码" class="headerlink" title="修改root本地账户密码"></a>修改root本地账户密码</h3><p>MySQL 安装完成之后，生成的默认密码在 <code>/var/log/mysqld.log</code> 文件中。使用 grep 命令找到日志中的密码。</p><pre class="line-numbers language-none"><code class="language-none">grep 'temporary password' /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.downk.cc/item/5fe404c33ffa7d37b34507ac.jpg" alt="查看临时密码"></p><p>临时密码就是localhost：后面的字段</p><p>接下来我们准备进入MYSQL数据库</p><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来会需要输入密码，将上面看到的临时密码输入就可以进入MySQL数据库了</p><p>当shell的运行从shell&gt;变为mysql&gt;时，则进入数据库成功</p><p>首次通过初始密码登录后，需要使用以下命令修改密码</p><pre class="line-numbers language-none"><code class="language-none">ALTER USER 'root'@'localhost' IDENTIFIED BY '此处为你想要设置的密码'; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改密码之后重新更新权限</p><pre class="line-numbers language-none"><code class="language-none">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：mysql 5.7 默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示 ERROR 1819 (HY000): Your password does not satisfy the current policy requirements 错误。查看 <a href="https://links.jianshu.com/go?to=https://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html%23sysvar_validate_password_policy">MySQL官网密码详细策略</a></p></blockquote><p><strong>注意：</strong>建议将密码设置的复杂一点，之前我有一位朋友，账号和密码都是root，导致被黑客劫持，向他索要比特币（真会挑人，都是穷*），虽然数据库没什么重要的东西，但是之前项目搭建的数据库全部木大，所以在这里建议各位尽量设置的复杂一点</p><h3 id="设置默认编码为utf8"><a href="#设置默认编码为utf8" class="headerlink" title="设置默认编码为utf8"></a>设置默认编码为utf8</h3><p>mysql 安装后默认不支持中文，需要修改编码。<br>修改 <code>/etc/my.cnf</code> 配置文件，在相关节点（没有则自行添加）下添加编码配置，如下：</p><pre class="line-numbers language-none"><code class="language-none">[mysqld]character-set-server=utf8[client]default-character-set=utf8[mysql]default-character-set=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启mysql服务，查询编码。可以看到已经改过来了</p><pre class="line-numbers language-none"><code class="language-none">systemctl restart mysqldmysql -uroot -pshow variables like 'character%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.downk.cc/item/5fe405043ffa7d37b34538d9.jpg" alt="查看编码"></p><h2 id="2-远程连接"><a href="#2-远程连接" class="headerlink" title="2.远程连接"></a>2.远程连接</h2><h3 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h3><p>默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须<strong>添加一个允许远程连接的账户</strong>。或者<del>修改root为允许远程连接</del>（不推荐）</p><p>创建一个新用户</p><pre class="line-numbers language-none"><code class="language-none">CREATE USER 'username'@'host' IDENTIFIED BY 'password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ul><li>username：你将创建的用户名</li><li>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以<strong>从任意远程主机登录</strong>，可以使用通配符<code>%</code>，如果想让该用户从指定远程主机登录，可以输入对应主机的ip地址</li><li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li></ul><p>例子：</p><ol><li><code>CREATE USER 'dog'@'localhost' IDENTIFIED BY '123456';</code></li><li><code>CREATE USER 'pig'@'192.168.1.101' IDENTIFIED BY '123456';</code></li><li><code>CREATE USER 'pig'@'%' IDENTIFIED BY '123456';</code></li><li><code>CREATE USER 'pig'@'%' IDENTIFIED BY '';</code></li><li><code>CREATE USER 'pig'@'%';</code></li></ol><h3 id="为新建用户授权"><a href="#为新建用户授权" class="headerlink" title="为新建用户授权"></a>为新建用户授权</h3><pre class="line-numbers language-none"><code class="language-none">GRANT privileges ON databasename.tablename TO 'username'@'host';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ul><li>privileges：用户的操作权限，如<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>等，如果要授予所的权限则使用<code>ALL</code></li><li>databasename：数据库名</li><li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示，如<code>*.*</code></li></ul><p>例子：</p><ol><li><code>GRANT SELECT, INSERT ON test.user TO 'pig'@'%';</code></li><li><code>GRANT ALL ON *.* TO 'pig'@'%';</code></li><li><code>GRANT ALL ON maindataplus.* TO 'pig'@'%';</code></li></ol><p><strong>注意：</strong></p><p>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令：</p><pre class="line-numbers language-none"><code class="language-none">GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="开始远程连接"><a href="#开始远程连接" class="headerlink" title="开始远程连接"></a>开始远程连接</h3><p>接下来使用一些MySQL图形化界面来远程连接，我这里使用的是sqlyog</p><p>输入对应的主机ip地址，用户名，密码以及对应的端口</p><p><img src="https://pic.downk.cc/item/5fe340503ffa7d37b3d52f38.png" alt="sqlyog新连接"></p><p>如果直接成功请忽略下面的操作，如果连接失败出现了**ERROR: 2003 Can’t connect to MySQL server on ‘xxx.xx.xx.xx’**，可以通过下列方法逐步进行排查</p><h2 id="3-解决主机连接失败问题"><a href="#3-解决主机连接失败问题" class="headerlink" title="3.解决主机连接失败问题"></a>3.解决主机连接失败问题</h2><h3 id="检查网络"><a href="#检查网络" class="headerlink" title="检查网络"></a>检查网络</h3><p>先检查网络是否畅通，我才用的方法是Xshell访问远程主机，你也可以尝试使用<code>ping</code></p><h3 id="检查云服务器的安全组"><a href="#检查云服务器的安全组" class="headerlink" title="检查云服务器的安全组"></a>检查云服务器的安全组</h3><p>登录你服务器的对应控制台（阿里云就进入阿里云控制台，腾讯云就进入腾讯云控制台）</p><p>检查22，443，80，3306端口是否放通</p><h3 id="检查用户权限"><a href="#检查用户权限" class="headerlink" title="检查用户权限"></a>检查用户权限</h3><p>进入数据库</p><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入密码进入数据库后，对于用户权限进行查询</p><pre class="line-numbers language-none"><code class="language-none">use mysqlselect host,user from user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果发现对应user的host有问题，则就是用户权限问题，如果为<code>%</code>或者正确的话，则继续向下排查</p><h3 id="检查CentOS防火墙"><a href="#检查CentOS防火墙" class="headerlink" title="检查CentOS防火墙"></a>检查CentOS防火墙</h3><p>这一步很容易被忽略，因为我当时就以为安全组已经设置好了，不必再检查CentOS的防火墙。其实检查防火墙是很有必要的，我们应该把3306端口放通，再重启防火墙，在Xshell中输入一下控制命令</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --permanent --zone=public --add-port=3306/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现success则设置成功</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现success则证明防火墙重启成功</p><p>再在sqlyog进行连接测试</p><p>出现下面界面证明远程连接成功</p><p><img src="https://pic.downk.cc/item/5fe345733ffa7d37b3dac430.png" alt="连接成功"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
